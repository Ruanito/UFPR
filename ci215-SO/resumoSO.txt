PROCESSO
    -Conceito
        O processo - É um programa em execução. Um processo é mais que o codigo
do programa, também contem o valor do PC e os registradores do processador. Cada
processo inclui process stack, quem contem temporiariamente (parametros de
funções, endereços de retorno a variaveis locais). Processo é uma entidade de
atividade. Um programa se torna um processo quando o arquivo executavel é
carregado em memória.
        Estados de um processo -
            new: novo processo criado
            running: em execução
            waiting: esperando um evento(exemplo I/O)
            ready: esperando processador para entrar em running
            terminaded: processo terminado
        Process control block - Todo processo é representado como um PCB pelo
processador.
            Process state: estado do processo(new, running, etc)
            Program counter: Indica o endereço do proximo processo
            CPU register: Inclui acumuladores, index do registro, ponteiro para
stack e objetivo para o registrador
            CPU-scheduling information: Inclui prioridade do processo e outros
parametros para scheduling

    Scheduling de Processos
        Schaduling queue - Quando um processo entra no sistem ele é colocado
numa job queue. Um processo em running ou waiting está na ready queue. Essas
filas são normalmente feita em list encadeana. Existe um ponteiro para primeira
e ultima PCB e cada PCB tem um ponteiro para o próximo. Existe mais de uma
fila(waiting queue and ready queue). Quando um processo é criado ele é colocado
na ready queue. Um processo é posto por vez na cpu, várias coisa podem acontecer
(necessitar um I/O, criar um novo subprocesso, pode ser removido da CPU e
colocado na ready queue)
        Schedulers -
            short-term scheduler - Seleciona processos que estão na ready queue
é coloca na CPU
            long-term scheduler - Escolhe processos que usam storage
        Context switch - Troca de processos. Quando é requisitada uma context
switch, o sistema precisa salvar o estado atual do processo e trocar pelo
procasso que está no topo do ready queue

    Opertion on Processes
        Process Creation - Um processo pode criar vários outros processos, o
processo que cria se chama pai e o que é criado é chamado de filho. Vários
sistemas incluindo UNIX e Windows indentificam o processo pelo process
identifier (ou pid) que é normalmente um inteiro. Quando um process cria um
subprocesso, é capaz de obter os recursos diretos do processo pai. O processo
pai consegue conpartilhar alguns processos (como memória e arquivos) com vários
processos filhos. Vários recursos físicos e lógicos o processo obtem quando é
criado.
        Quando um processo é criado, existe duas possibilidades de execução
            1. Processo pai continua rodando junto com processo filho
            2. Processo pai espera até o filho terminar
        Existe duas possibilidades de espaço de endereço para o novo processo
            1. Processo filho é um copia do processo pai (tem mesmo programa a
data do pai)
            2. Processo filho carrega um novo programa
        No UNIX um novo processo é criado com a função fork(). Após o comando
fork() o processo pai e filho executão juntos, única diferença é o return do
novo processo é zero para novos processos e não zero é returnado para o processo
pai
        Depois do comando fork() é normalmente executado o comando exex() para
carregar um novo programa no processo criado. O exec() carrega um novo arquivo
binario na memória
        Um exempl em C

#include <sys/types.h>
#include <sdtio.h>
#include <unistd.h>

int main () {
    pid_t pid;

    /* fork a child process */
    pid = fork();

    if (pid < 0) { /* error occurred */
        fprintf(stderr, "Fork Failad");
        return 1;
    } else if (pid = 0) { /*child process */
        execlp("/bin/ls", "ls", NULL);
    } else { /* parent process */
        /* parent will wait for the child to complete */
        wait(NULL);
        printf ("Child Complete\n");
    }

    return 0;
}

        Process Termination - Um processo termina quando ele acaba e execução e
pergunta para o sistema operarional deletar ele usando comand exit(). O processo
deve retornar um valor de status para o processo pai. Todos os recursos são
desalocados. Um processo pode terminar com outro via system call ou um usúario
pode matar o job.
            Um processo pai pode terminar com um processo filho por várias
razões
                1. Um processo filho está executando e usando um recurso que já
foi alocado
                2. Quando a tarefa atribuída não é mais requerida
                3. Quando um processo pai é terminado, o sistema operacional não
permite que o processo filho continue sem um processo pai
