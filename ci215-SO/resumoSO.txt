PROCESSO
    -Conceito
        O processo - É um programa em execução. Um processo é mais que o codigo
do programa, também contem o valor do PC e os registradores do processador. Cada
processo inclui process stack, quem contem temporiariamente (parametros de
funções, endereços de retorno a variaveis locais). Processo é uma entidade de
atividade. Um programa se torna um processo quando o arquivo executavel é
carregado em memória.
        Estados de um processo -
            new: novo processo criado
            running: em execução
            waiting: esperando um evento(exemplo I/O)
            ready: esperando processador para entrar em running
            terminaded: processo terminado
        Process control block - Todo processo é representado como um PCB pelo
processador.
            Process state: estado do processo(new, running, etc)
            Program counter: Indica o endereço do proximo processo
            CPU register: Inclui acumuladores, index do registro, ponteiro para
stack e objetivo para o registrador
            CPU-scheduling information: Inclui prioridade do processo e outros
parametros para scheduling

    Scheduling de Processos
        Schaduling queue - Quando um processo entra no sistem ele é colocado
numa job queue. Um processo em running ou waiting está na ready queue. Essas
filas são normalmente feita em list encadeana. Existe um ponteiro para primeira
e ultima PCB e cada PCB tem um ponteiro para o próximo. Existe mais de uma
fila(waiting queue and ready queue). Quando um processo é criado ele é colocado
na ready queue. Um processo é posto por vez na cpu, várias coisa podem acontecer
(necessitar um I/O, criar um novo subprocesso, pode ser removido da CPU e
colocado na ready queue)
        Schedulers -
            short-term scheduler - Seleciona processos que estão na ready queue
é coloca na CPU
            long-term scheduler - Escolhe processos que usam storage
        Context switch - Troca de processos. Quando é requisitada uma context
switch, o sistema precisa salvar o estado atual do processo e trocar pelo
procasso que está no topo do ready queue

    Opertion on Processes
        Process Creation - Um processo pode criar vários outros processos, o
processo que cria se chama pai e o que é criado é chamado de filho. Vários
sistemas incluindo UNIX e Windows indentificam o processo pelo process
identifier (ou pid) que é normalmente um inteiro. Quando um process cria um
subprocesso, é capaz de obter os recursos diretos do processo pai. O processo
pai consegue conpartilhar alguns processos (como memória e arquivos) com vários
processos filhos. Vários recursos físicos e lógicos o processo obtem quando é
criado.
        Quando um processo é criado, existe duas possibilidades de execução
            1. Processo pai continua rodando junto com processo filho
            2. Processo pai espera até o filho terminar
        Existe duas possibilidades de espaço de endereço para o novo processo
            1. Processo filho é um copia do processo pai (tem mesmo programa a
data do pai)
            2. Processo filho carrega um novo programa
        No UNIX um novo processo é criado com a função fork(). Após o comando
fork() o processo pai e filho executão juntos, única diferença é o return do
novo processo é zero para novos processos e não zero é returnado para o processo
pai
        Depois do comando fork() é normalmente executado o comando exex() para
carregar um novo programa no processo criado. O exec() carrega um novo arquivo
binario na memória
        Um exempl em C

#include <sys/types.h>
#include <sdtio.h>
#include <unistd.h>

int main () {
    pid_t pid;

    /* fork a child process */
    pid = fork();

    if (pid < 0) { /* error occurred */
        fprintf(stderr, "Fork Failad");
        return 1;
    } else if (pid = 0) { /*child process */
        execlp("/bin/ls", "ls", NULL);
    } else { /* parent process */
        /* parent will wait for the child to complete */
        wait(NULL);
        printf ("Child Complete\n");
    }

    return 0;
}

        Process Termination - Um processo termina quando ele acaba e execução e
pergunta para o sistema operarional deletar ele usando comand exit(). O processo
deve retornar um valor de status para o processo pai. Todos os recursos são
desalocados. Um processo pode terminar com outro via system call ou um usúario
pode matar o job.
            Um processo pai pode terminar com um processo filho por várias
razões
                1. Um processo filho está executando e usando um recurso que já
foi alocado
                2. Quando a tarefa atribuída não é mais requerida
                3. Quando um processo pai é terminado, o sistema operacional não
permite que o processo filho continue sem um processo pai

    CPU Scheduling
        Basic Concepts - Um processador con um core consegue rodar processo por
vez. Objetivo em um mult core é rodar vários processos por vez para não deixar a
CPU esperando.
        CPU Scheduler - O sitema operacional tem que selecionar um processo da
ready queue para executar e alocar a CPU para aquele processo. A ready queue não
precisa ser um FIFO, existe vários algoritimos para scheduling.
        Preemptive Scheduling - O CPU-scheduling deve tomar uma decisão para
essas quatros circunstâncias
            1. Quando o processo troca de running para waiting
            2. Quando o processo troca de running para ready
            3. Quando o processo troca de waiting para ready
            4. Quando o processo termina
            Na circustância 1 e 4, diz que o scheduling é não preventivo ou
coperativo, em outro caso diz que é preventivo. Infelizmente, um scheduling
preventivo custa associação com acesso de memória compartilhada.
        Dispatcher - Um componente na CPU-scheduling é a função dispatcher. Essa
funcão envolve os seguinter.
            1. Troca de contesto
            2. Troca de modo de usúario
            3. Pulapara uma localização em um programa do usúario para restart
do programa
        Scheduling Criteria -
            CPU utilization. Manter sempre alta a utilização da CPU
            Throughput. O total de processos executados em um tempo é chamada
Throughput(vazão)
            Turnourand time. Ponte de vista para quanto tempo leva para executar
um processo. É considerado o tempo que leva para completar de executar se chama
tempo total
            Waiting time. O algoritimo CPU-scheduling não afeta o tempo total do
processa, só afeta o tempo de espera no ready queue. Waiting time é a soma dos
periodos gasto na ready queue
            Response time. É o tempo que começa a responder.
            É desejavel maximilizar a utilização da CPU e vazão e minimizar o
uso do tempo total, tempo de espera e tempo de resposta.

    Scheduling algorithms
        First come, first-served Sheduling - É uma fila simples, o primeiro da
ready queue é colocado na CPU, quando o processo termina novamene pega o
primeiro da ready queue.
        Shortest-job-first scheduling - O algoritimo coloca na frente os
processos que tem o menor tamanho de execução. Ele simplesmente move os
processos com menor tamanho de execução na frente dos com maiores tempo de
execução. É provavelmente um algoritimo otimizado.
        Priority Scheduling - Cada processo ganha um priorida, se um processo
tem prioridade maior que outro ele entra na frente, caso seja a mesma usa um
FIFO. Priorida pode ser definido internamente ou externamente. Internamente pelo
uso de memória, tempo limite, I/O, etc, externamente pela importancia do
processo e etc. O grande problema desse algoritimo é indefinite block ou
starvation. O processo está ready mais a CPU pode considerar bloqueado e tambem
pode deixar alguns processos de baixa prioridade esperando infinitamente. A
solução para starvation se chama aging. É uma tequinica que gradativamente vai
almentando a prioridade do processo.
        Round-Robin Scheduling - É similar ao FIFO scheduling, esse algoritimo é
divido em intervalos de tempo chamado quantum. Um quantum é geralmente de 10 a
100 milisgundos de tamanho. Ele pega o primeiro processo do ready queue e
executa, caso o processo termine antes de um quantum, é colocado um novo
processo na CPU, caso contrario o processo retorna para o final a queue e espera
para ser executado denovo até terminar a execução.
        Mutilevel Queue Scheduling - É particionar a ready queue em separetes
queue, geralmente baseado em alguma propriedade do processo. Um exemplo de
multilevel queue, listado em ordem de prioridade.
            1. Processos do sitemas
            2. Processos interativos
            3. Processos interativos de edição
            4. Processos de estudantes

    Deadlock
        System model - Um modo normal de operação, um processo pode usar um
recurso da seguinte forma.
            1. Request - Um processo faz um request de um recurso. Se a
requisição não pode ser atendida ele fica esperando até ter o recurso
disponivel.
            2. Use - O processo consegue usar o recurso
            3. Release - O processo libera o recurso.
        Necessary Conditions - Um deadlock pode entrar se uma das quatro
condições simutaneamente segurarem o sistema.
            1. Mutual exclusion - Pelo menos um recurso deve ser segurado em
modo não compartilhado.
            2. Hold and wait - Um processo está segurando pelo menos um recurso
e esperando adiquirir mais um recurso que está concorrendo com outro processo.
            3. No preemption - Recursos não são preventivos, o recurso só pode
ser liberado pelo processo que está segurando, quando ele termina a atividade.
            4. Circular wait - Quando existe um espera circular (minha melhor
explicação =D).
        Methods for Handing Deadlocks - Geralmente se trabalha com deadlock com
esses três caminhos.
            1. Pode usar um protocolo que preve ou evita deadlocks, tendo
certeza que o sistema numca emtra em deadlock.
            2. Pode permitir que quando o sitema entrar em deadlock, ele detecte
e recupere-se.
            3. Ou ignora o problema e funcione como que o sistema nunca entre em
deadlock.
        Deadlock Prevention -
            Mutual Exclusion - Mutual exclução só entra quando o recurso é não
compartilhado, para recurso compartilhados é impossível de entrar em mutual
exclução.
            Hold and wait - Para ter certeze que nunca entre em segura e espara
é usando um protocolo que o processo pessa todos os recursos quando for
iniciado ou  nunca segurar um recurso quando pedir outro. Os dois tem grandes
problemas, o primeiro pode ficar com recursos sem utilizar por muito tempo e o
segundo é possível que entre em starvation.
            No Preemption - Quando um processo requisitar um recurso e ele não
pode ser atendido imetitamente, ele libera todos os recursos que ele estava
segurando.
            Circular wait - Se colocar um valor inteiro para cada recurso e
nenhum número repetido, quando um processo faz o pedido de um recurso Ri e
depois um pedido de recurso Rj, ele só pode ser atendido se Ri < Rj.
        Deadlock avoidance
            Safe State - É quando todos o sistema pode alocar os recurso para
todos os processo em alguma ordem e continuar evitando deadlock.
